require 'socket'
require 'uri'
require 'open-uri'
require 'fileutils'

#own classes
require 'require_all'
require_all 'modules'

#host definitions
host = 'localhost'
port = 2345

#directory definitions
WEB_ROOT = './public'

def get_page(request, socket)
  url = get_url(request)
  puts url + " has been whitelisted"
  source = open(get_url(request)).read
  #puts source
  
  #check if dir exists
  #if not then create a directory
  spliced_url = splice_url(url)
  puts spliced_url
   
  curr_dir = Dir.pwd
  puts curr_dir
  
  #if not curr_dir.include?(spliced_url)
  #  Dir.chdir("public/cached")
  #  Dir.mkdir(spliced_url) unless File.exists?(spliced_url)
  #  Dir.chdir(spliced_url)
  #  puts Dir.pwd
  #else curr_dir.include?(spliced_url)
  #  puts Dir.pwd
  #  Dir.pwd.trim(spliced_url)
  #end
  
  open("index.html", "w") { |file|
    file.puts source
  }
  
  #return indexed cache to original window
  #hmmm...
end

Helpers.inialisation_preamble

#allow = Allow.new
block = Block.new
server = TCPServer.new(host, port)

loop do
	socket = server.accept
	request = socket.gets
	
	puts request
	puts Helpers.get_url(request)
	
	if !request.nil?
	  if block.check_url(Helpers.get_url(request))
	    block.block_req(socket)
	  else
	    allow.retrieve_page(request, socket)
	  end
	end
	
  socket.close
end
